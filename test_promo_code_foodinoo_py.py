# -*- coding: utf-8 -*-
"""test_promo_code_foodinoo.py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UgAkkLYzyBH5Cw5dOjgxrvYS0riKj16k

### Test automatisé du code promotionnel sur foodinoo.fr

Ce notebook automatise un scénario de test fonctionnel avec Playwright en Python.

**Objectif** :
- Naviguer sur le site foodinoo.fr
- Aller sur la page "Nos plateaux"
- Ajouter des produits au panier
- Tester l’application d’un code promo `MIAM10` conditionné à un montant minimum d'achat (40€)
- Vérifier que la remise s’applique uniquement si le total atteint 40€

---

**Technologies utilisées** :  
- Python (asyncio)  
- Playwright (pour l’automatisation web)  

---

##2. Cellule Code — Imports et setup Playwright
python
Copier
Modifier
"""

import asyncio
from playwright.async_api import async_playwright

"""##3. Cellule Code — Fonction de test principale

"""

async def test_promo_code(total_expected_min, products_to_add, promo_code, should_apply_discount):
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        print("Ouverture de la page d'accueil...")
        await page.goto("https://foodinoo.fr")
        print(f"Page ouverte: {await page.title()}")

        print("Navigation vers la page 'Nos plateaux'...")
        await page.click("text=Nos plateaux")
        await page.wait_for_load_state("networkidle")
        print("Page 'Nos plateaux' chargée")

        print("Ajout des produits au panier...")
        for product_selector in products_to_add:
            await page.click(product_selector)
            await asyncio.sleep(1)
            print(f"Produit ajouté : {product_selector}")

        print("Ouverture du panier...")
        await page.click("css=button#cart")
        await page.wait_for_load_state("networkidle")
        print("Panier ouvert")

        print("Validation du panier...")
        await page.click("text=Valider le panier")
        await page.wait_for_load_state("networkidle")

        print(f"Application du code promo '{promo_code}' ...")
        await page.fill("input[name='promo_code']", promo_code)
        await page.click("button#apply_promo")
        await asyncio.sleep(2)

        total_text = await page.text_content("css=span#total_amount")
        discount_text = await page.text_content("css=span#discount_amount")

        total = float(total_text.replace("€", "").strip()) if total_text else 0.0
        discount = float(discount_text.replace("€", "").strip()) if discount_text else 0.0

        print(f"Montant total affiché : {total}€")
        print(f"Remise affichée : {discount}€")

        if should_apply_discount:
            assert discount > 0, "Erreur : la remise devait s'appliquer mais ne s'est pas appliquée."
            assert total <= total_expected_min, f"Erreur : total après remise incorrect, attendu <= {total_expected_min}€"
            print(" Remise appliquée correctement.")
        else:
            assert discount == 0, "Erreur : la remise ne devait pas s'appliquer mais elle s'est appliquée."
            print(" Remise non appliquée comme prévu.")

        print("Test terminé.\n")
        await browser.close()

"""##4. Cellule Code — Fonction main pour lancer les tests


"""

async def main():
    # Cas 1 : Total >= 40€, remise attendue
    products_case1 = [
        "css=button#add_plateau1",
        "css=button#add_plateau2"
    ]
    print("Test avec panier >= 40€")
    await test_promo_code(total_expected_min=36.0, products_to_add=products_case1, promo_code="MIAM10", should_apply_discount=True)

    # Cas 2 : Total < 40€, pas de remise
    products_case2 = [
        "css=button#add_plateau3"
    ]
    print("Test avec panier < 40€")
    await test_promo_code(total_expected_min=25.0, products_to_add=products_case2, promo_code="MIAM10", should_apply_discount=False)

"""##5. Cellule Code — Lancement du test


"""

if __name__ == "__main__":
    asyncio.run(main())